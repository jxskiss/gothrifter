{{/* Package */}}

const (
	MaxMapElements    = 1 << 20
	MaxSetElements    = 1 << 20
	MaxListElements   = 1 << 20
	MaxServerPipeline = 10
)

{{ range .Constants }}
{{ if (eq .Type.Category "container") }}
var {{ .Name }} = {{ formatType .Type }}{{ formatValue .Value }}
{{ else }}
const {{ .Name }} {{ formatType .Type }} = {{ formatValue .Value }}
{{ end }}
{{ end }}

{{ range $enum := .Enums }}
{{ $name := ( toCamelCase $enum.Name ) }}

type {{ $name }} int32

const (
	{{ range $enum.Values }}
	{{ $name }}_{{ .Name }} {{ $name }} = {{ .Value }}
	{{ end }}
)

var {{ $name }}ToName = map[{{ $name }}]string {
    {{ range $enum.Values }}
    {{ $name}}_{{ .Name }} : "{{ .Name }}",
    {{ end }}
}

var {{ $name }}ToValue = map[string]{{ $name }} {
    {{ range $enum.Values }}
    "{{ .Name }}" : {{ $name }}_{{ .Name }},
    {{ end }}
}

func (p {{ $name }}) String() string {
    if v, ok := {{ $name }}ToName[p]; ok {
        return v
    }
    return "<UNSET>"
}

func {{ $name }}FromString(s string) ({{ $name }}, error) {
    if v, ok := {{ $name }}ToValue[s]; ok {
        return v, nil
    }
    return 0, fmt.Errorf("not a valid {{ $name }} string")
}

func {{ $name }}Ptr(v {{ $name }}) *{{ $name }} { return &v }

{{ end }}
