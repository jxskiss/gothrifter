// GENERATED BY GOTHRIFTER (version: {{ VERSION }})
// DO NOT EDIT UNLESS YOU DO KNOW WHAT YOU ARE DOING
// @generated

package {{ .Name }}

import (
	"context"
	"fmt"

    "github.com/go-kit/kit/endpoint"
    "github.com/jxskiss/thriftkit/lib/go-kit"
	thrift "github.com/jxskiss/thriftkit/lib/thrift"

	{{ range .Includes }}
	{{ .Name }} "{{ .ImportPath }}"
	{{ end }}
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = context.Canceled
	_ = fmt.Printf
	_ = thrift.BinaryVersion1

	{{ range .Includes }}
	_ = {{ .Name }}.GoUnusedProtection__
	{{ end }}
)

{{ range $name, $svc := .Services }}

// {{ $svc.Name }}KitClient implements the {{ $svc.Name }}Handler interface.
type {{ $svc.Name }}KitClient struct {
    kc *kit.Client
}

func New{{ $svc.Name }}KitClient(kc *kit.Client) *{{ $svc.Name }}KitClient {
    kc = kc.UseFactory(mk{{ $svc.Name }}ClientEndpoint)
    return &{{ $svc.Name }}KitClient{kc}
}

func New{{ $svc.Name }}KitClientAddress(caller, service, addr string, opts ...thrift.Option) *{{ $svc.Name }}KitClient {
    kc := kit.NewClient(caller, service, opts...).
        UseAddress(addr).
        UseFactory(mk{{ $svc.Name }}ClientEndpoint)
    return &{{ $svc.Name }}KitClient{kc}
}

func New{{ $svc.Name }}KitClientSimpleConsul(caller, service string, opts ...thrift.Option) (*{{ $svc.Name }}KitClient, error) {
	instancer, err := kit.SimpleConsulInstancer(service)
	if err != nil {
		return nil, err
	}
	kc := kit.NewClient(caller, service, opts...).
	    UseInstancer(instancer).
        UseFactory(mk{{ $svc.Name }}ClientEndpoint)
	return &{{ $svc.Name }}KitClient{kc}, nil
}

{{ range $meth := $svc.Methods }}
func (cli *{{ $svc.Name }}KitClient) {{ toCamelCase $meth.Name }}(
    ctx context.Context,
	{{ range $meth.Arguments }}{{ .Name }} {{ if (isPtrType .Type) }}*{{ end }}{{ formatType .Type }}, {{ end }}
) ( {{ if (not (or $meth.Oneway (eq $meth.ReturnType.Name "void"))) }} {{ formatReturn $meth.ReturnType }}, {{ end }} error) {
    {{ if (or $meth.Oneway (eq $meth.ReturnType.Name "void") ) }}
    // {{ if $meth.Oneway }}oneway{{ else }}void{{ end }}
    _, err := cli.kc.Call("{{ toCamelCase $meth.Name }}", ctx, {{ if $meth.Arguments }}{{ (index $meth.Arguments 0).Name }}{{ else }}nil{{ end }})
    return err
    {{ else }}
    rsp, err := cli.kc.Call("{{ toCamelCase $meth.Name }}", ctx, {{ if $meth.Arguments }}{{ (index $meth.Arguments 0).Name }}{{ else }}nil{{ end }})
    if err != nil {
        return nil, err
    }
    {{ if isPtrType $meth.ReturnType }}
    if rsp == nil {
        return nil, thrift.ErrNilResponse
    }
    {{ end }}
    return rsp.({{ formatReturn $meth.ReturnType }}), nil
    {{ end }}
}
{{ end }}

func mk{{ $svc.Name }}ClientEndpoint(invoker thrift.Invoker) endpoint.Endpoint {
	client := New{{ $svc.Name }}Client(invoker)
	return func(ctx context.Context, req interface{}) (interface{}, error) {
        switch method := kit.Method(ctx); method {
        {{ range $meth := $svc.Methods }}
        case "{{ toCamelCase $meth.Name }}":
            {{ if (or $meth.Oneway (eq $meth.ReturnType.Name "void") ) }}
            // {{ if $meth.Oneway }}oneway{{ else }}void{{ end }}
            err := client.{{ toCamelCase $meth.Name }}(ctx, {{ if $meth.Arguments }}req.({{ if (isPtrType (index $meth.Arguments 0).Type) }}*{{ end }}{{ formatType (index $meth.Arguments 0).Type }}){{ end }})
            return nil, err
            {{ else }}
            return client.{{ toCamelCase $meth.Name }}(ctx, {{ if $meth.Arguments }}req.({{ if (isPtrType (index $meth.Arguments 0).Type) }}*{{ end }}{{ formatType (index $meth.Arguments 0).Type }}){{ end }})
            {{ end }}
        {{ end }}
        default:
            return nil, thrift.ErrUnknownFunction
        }
	}
}

{{ end }}