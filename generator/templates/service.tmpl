{{/* Package */}}

{{ range $name, $svc := .Services }}

{{ formatArguments $svc }}

type {{ $svc.Name }}Client struct {
	thrift.Client
}

func New{{ $svc.Name }}Client(cli thrift.Client) *{{ $svc.Name }}Client {
	return &{{ $svc.Name }}Client{Client: cli}
}

{{ range $meth := $svc.Methods }}
func (cli *{{ $svc.Name }}Client) {{ toCamelCase $meth.Name }}(
    ctx context.Context,
	{{ range $meth.Arguments }}{{ .Name }} {{ if (eq .Type.Category "identifier") }}*{{ end }}{{ formatType .Type }}, {{ end }}
) ( {{ if (not (or $meth.Oneway (eq $meth.ReturnType.Name "void"))) }} {{ formatReturn $meth.ReturnType }}, {{ end }} error) {
	args := &{{ $svc.Name }}{{ toCamelCase $meth.Name }}Args{
		{{ range $meth.Arguments }}
		{{ toCamelCase .Name }}: {{ .Name }},
		{{ end }}
	}
	{{ if $meth.Oneway }}
	err := cli.Client.Invoke(ctx, "{{ toCamelCase $meth.Name }}", args, nil)
	return err
	{{ else if (eq $meth.ReturnType.Name "void") }}
	result := New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Result()
	err := cli.Client.Invoke(ctx, "{{ toCamelCase $meth.Name }}", args, result)
	return err
	{{ else }}
	result := New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Result()
	zero := result.Success
	err := cli.Client.Invoke(ctx, "{{ toCamelCase $meth.Name }}", args, result)
	if err != nil {
		return zero, err
	}

	{{ if $meth.Exceptions }}
	{{ range $exc := $meth.Exceptions }}
	if result.{{ toCamelCase $exc.Name }} != nil {
		return zero, result.{{ toCamelCase $exc.Name }}
	}
	{{ end }}
	{{ end }}

	return result.Success, nil
	{{ end }}
}
{{ end }}

type {{ $svc.Name }}Handler interface {
	{{ range $meth := $svc.Methods }}
	{{ toCamelCase $meth.Name }}(ctx context.Context, {{ range $meth.Arguments }}{{ .Name }} {{ if (eq .Type.Category "identifier") }}*{{ end }}{{ formatType .Type }}, {{ end }} ) (
		{{ if (not (or $meth.Oneway (eq $meth.ReturnType.Name "void"))) }} {{ formatReturn $meth.ReturnType }}, {{ end }} error)
	{{ end }}
}

type {{ $svc.Name }}Server struct {
	handler {{ $svc.Name }}Handler
}

func New{{ $svc.Name }}Server(h {{ $svc.Name }}Handler) *{{ $svc.Name }}Server {
	return &{{ $svc.Name }}Server{handler: h}
}

func (h {{ $svc.Name }}Server) Process(ctx context.Context, r thrift.Reader, w thrift.Writer) error {
	type request struct {
        method string
        seqid  int32
		args   interface{}
	}
	ch := make(chan request, MaxServerPipeline)
	ctx, cancel := context.WithCancel(ctx)
	var wg sync.WaitGroup
	defer func() { close(ch); cancel(); wg.Wait() }()

	wg.Add(1)
	go func() {
		defer wg.Done()
		for req := range ch {
            var rspTypeid = thrift.REPLY
			var rspBody interface{}
			switch req.method {
			{{ range $meth := $svc.Methods }}
			case "{{ toCamelCase $meth.Name }}":
			{{ if $meth.Arguments }} args := req.args.(*{{ $svc.Name }}{{ toCamelCase $meth.Name }}Args) {{ end }}
			{{ if $meth.Oneway }}
				err := h.handler.{{ toCamelCase $meth.Name }}(ctx, {{ range $meth.Arguments }}args.{{ toCamelCase .Name }}, {{ end }} )
				if err != nil {
					// TODO
				}
				continue
			{{ else if (eq $meth.ReturnType.Name "void" ) }}
				result := New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Result()
				err := h.handler.{{ toCamelCase $meth.Name }}(ctx, {{ range $meth.Arguments }}args.{{ toCamelCase .Name }}, {{ end }} )
			{{ else }}
				result := New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Result()
				ret, err := h.handler.{{ toCamelCase $meth.Name }}(ctx, {{ range $meth.Arguments }}args.{{ toCamelCase .Name }}, {{ end }} )
				result.Success = ret
			{{ end }}
			{{ if (not $meth.Oneway) }}
				rspBody = result
				if err != nil {
					{{ if $meth.Exceptions }}
					switch e := err.(type) {
					{{ range $exc := $meth.Exceptions }}
					case *{{ formatType $exc.Type }}:
						result.{{ toCamelCase $exc.Name }} = e {{ end }}
					default:
					    rspTypeid = thrift.EXCEPTION
						rspBody = thrift.FromErr(e)
					}
					{{ else }}
					rspTypeid = thrift.EXCEPTION
					rspBody = thrift.FromErr(err)
					{{ end }}
				}
			{{ end }}
			{{ end }}
			}
			// TODO: log or something?
			if err := w.WriteMessageBegin(req.method, rspTypeid, req.seqid); err != nil {
				return
			}
			if err := thrift.Write(rspBody, w); err != nil {
				return
			}
			if err := w.Flush(); err != nil {
				return
			}
		}
	}()

	for {
        name, typeid, seqid, err := r.ReadMessageBegin()
        if err != nil {
			return err
		}
		if typeid != thrift.CALL {
		    return thrift.ErrMessageType
		}
		var req = request{ method: name, seqid:  seqid }
		switch name {
		{{ range $meth := $svc.Methods }}
		case "{{ toCamelCase $meth.Name }}":
			req.args = New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Args()
		{{ end }}
		default:
			return thrift.ErrUnknownFunction
		}
		if err := thrift.Read(req.args, r); err != nil {
			return err
		}
		ch <- req
	}
}

{{ end }}
