// GENERATED BY GOTHRIFTER (version: {{ VERSION }})
// DO NOT EDIT UNLESS YOU DO KNOW WHAT YOU ARE DOING
// @generated

package {{ .Name }}

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"encoding/json"

	thrift "github.com/jxskiss/thriftkit/lib/thrift"

	{{ range .Includes }}
	{{ .Name }} "{{ .ImportPath }}"
	{{ end }}
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = context.Canceled
	_ = fmt.Printf
	_ = thrift.BinaryVersion1

	{{ range .Includes }}
	_ = {{ .Name }}.GoUnusedProtection__
	{{ end }}
)

{{ range $name, $svc := .Services }}

func (h {{ $svc.Name }}Processor) ProcessHttp(ctx context.Context, r *http.Request, w http.ResponseWriter) error {
	var (
		marshal   func(v interface{}) ([]byte, error)
		unmarshal func(data []byte, v interface{}) error
	)
	contentType := r.Header.Get("Content-Type")
	i := strings.Index(contentType, ";")
	if i == -1 {
		i = len(contentType)
	}
	switch strings.TrimSpace(strings.ToLower(contentType[:i])) {
	case "application/json":
	    marshal = json.Marshal
	    unmarshal = json.Unmarshal
    case "application/x-thrift":
        marshal = func(v interface{}) ([]byte, error) {
            return thrift.Marshal(v.(thrift.Writable))
        }
        unmarshal = func(data []byte, v interface{}) error {
            return thrift.Unmarshal(data, v.(thrift.Readable))
        }
    default:
        msg := fmt.Sprintf("unexpected Content-Type: %q", contentType)
        // TODO: write error to client
        w.WriteHeader(http.StatusBadRequest)
        if _, err := w.Write([]byte(msg)); err != nil {
            return err
        }
	}

	method := r.Header.Get("X-Rpc-Method")
	if method == "" {
	    // TODO
	}
	switch method {
	{{ range $meth := $svc.Methods }}
	case "{{ $meth.Name }}":
	    reqBody, err := ioutil.ReadAll(r.Body)
	    r.Body.Close()
	    if err != nil {
	        // TODO
	        return err
	    }
	    args := New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Args()
        if err = unmarshal(reqBody, args); err != nil {
            // TODO
            return err
        }

        // TODO: check requiredness

        {{ if (or $meth.Oneway (eq $meth.ReturnType.Name "void") ) }}
        // {{ if $meth.Oneway }}oneway{{ else }}void{{ end }}
        var rsp interface{} = make(map[string]string)
        err = h.handler.{{ $meth.Name }}(ctx, {{ if $meth.Arguments }}args.{{ toCamelCase (index $meth.Arguments 0).Name }}{{ end }})
        {{ else }}
        var ret = New{{ $svc.Name }}{{ toCamelCase $meth.Name }}Result()
        var rsp interface{} = ret
        ret.Success, err = h.handler.{{ $meth.Name }}(ctx, {{ if $meth.Arguments }}args.{{ toCamelCase (index $meth.Arguments 0).Name }}{{ end }})
        {{ end }}

        if err != nil {
            {{ if $meth.Exceptions }}
            switch e := err.(type) {
            {{ range $exc := $meth.Exceptions }}
            case *{{ formatType $exc.Type }}:
                ret.{{ toCamelCase $exc.Name }} = e
            {{ end }}
            default:
                w.WriteHeader(http.StatusInternalServerError)
                rsp = thrift.FromErr(err)
            }
            {{ else }}
            w.WriteHeader(http.StatusInternalServerError)
            rsp = thrift.FromErr(err)
            {{ end }}
        }
        rspBody, err := marshal(rsp)
        if err != nil {
            // TODO
            return err
        }
        if _, err = w.Write(rspBody); err != nil {
            // TODO
            return err
        }
        return nil
	{{ end }}
	default:
	    err := thrift.ErrUnknownFunction
	    // TODO
	    return err
	}

	return nil
}

{{ end }}