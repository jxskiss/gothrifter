// GENERATED BY GOTHRIFTER (version: {{ VERSION }})
// DO NOT EDIT UNLESS YOU DO KNOW WHAT YOU ARE DOING
// @generated

package {{ .Name }}

import (
	"context"
	"fmt"

    "github.com/go-kit/kit/endpoint"
    "github.com/go-kit/kit/log"
    "github.com/jxskiss/thriftkit/lib/go-kit"
	thrift "github.com/jxskiss/thriftkit/lib/thrift"

	{{ range .Includes }}
	{{ .Name }} "{{ .ImportPath }}"
	{{ end }}
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = context.Canceled
	_ = fmt.Printf
	_ = thrift.BinaryVersion1
	_ log.Logger

	{{ range .Includes }}
	_ = {{ .Name }}.GoUnusedProtection__
	{{ end }}
)

{{ range $name, $svc := .Services }}

// {{ $svc.Name }}KitWrapper implements the {{ $svc.Name }}Handler interface.
//
// It take an implementation of {{ $svc.Name }}Handler and wrap all endpoints
// with defined middlewares. It's intended to be used with {{ $svc.Name }}Processor.
type {{ $svc.Name }}KitWrapper struct {
    name   string
    logger log.Logger
    {{ range $meth := $svc.Methods }}
    {{ $meth.Name }}Endpoint endpoint.Endpoint
    {{ end }}
}

func (s *{{ $svc.Name }}KitWrapper) SetLogger(logger log.Logger) {
    s.logger = logger
}

func New{{ $svc.Name }}KitWrapper(name string, svc {{ $svc.Name }}Handler) *{{ $svc.Name}}KitWrapper {
    return &{{ $svc.Name}}KitWrapper{
        name:   name,
        logger: kit.DefaultLogger,
        {{ range $meth := $svc.Methods }}
        {{ $meth.Name }}Endpoint: mk{{ $svc.Name }}{{ $meth.Name }}Endpoint(svc),
        {{ end }}
    }
}

// New{{ $svc.Name }}KitDefaultProcessor wraps the provided {{ $svc.Name }}Handler
// using {{ $svc.Name }}KitWrapper. The default logger `kit.DefaultLogger` will be used.
func New{{ $svc.Name }}KitDefaultProcessor(name string, svc {{ $svc.Name }}Handler) *{{ $svc.Name }}Processor {
    handler := New{{ $svc.Name }}KitWrapper(name, svc)
    return New{{ $svc.Name }}Processor(handler)
}

{{ range $meth := $svc.Methods }}
func (s *{{ $svc.Name }}KitWrapper) {{ $meth.Name }}(ctx context.Context, {{ if $meth.Arguments }}req {{ if (isPtrType (index $meth.Arguments 0).Type) }}*{{ end }}{{ formatType (index $meth.Arguments 0).Type }},{{ end }}) (
    {{ if (not (or $meth.Oneway (eq $meth.ReturnType.Name "void"))) }} {{ formatReturn $meth.ReturnType }}, {{ end }} error) {
    ctx = kit.NewServerRpcCtx(ctx, s.name, "{{ $meth.Name }}")
    {{ if (or $meth.Oneway (eq $meth.ReturnType.Name "void") ) }}
    // {{ if $meth.Oneway }}oneway{{ else }}void{{ end }}
    _, err := kit.MW(s.{{ $meth.Name }}Endpoint, s.logger)(ctx, {{ if $meth.Arguments }}req{{ else }}nil{{ end }})
    return err
    {{ else }}
    rsp, err := kit.MW(s.{{ $meth.Name }}Endpoint, s.logger)(ctx, req)
    if err != nil || rsp == nil {
        return nil, err
    }
    return rsp.({{ formatReturn $meth.ReturnType }}), nil
    {{ end }}
}
{{ end }}

{{ range $meth := $svc.Methods }}
func mk{{ $svc.Name }}{{ $meth.Name }}Endpoint(svc {{ $svc.Name }}Handler) endpoint.Endpoint {
    return func(ctx context.Context, req interface{}) (interface{}, error) {
        {{ if (or $meth.Oneway (eq $meth.ReturnType.Name "void") ) }}
        // {{ if $meth.Oneway }}oneway{{ else }}void{{ end }}
        err := svc.{{ $meth.Name }}(ctx, {{ if $meth.Arguments }}req.({{ if (isPtrType (index $meth.Arguments 0).Type) }}*{{ end }}{{ formatType (index $meth.Arguments 0).Type }}){{ end }})
        return nil, err
        {{ else }}
        return svc.{{ $meth.Name }}(ctx, {{ if $meth.Arguments }}req.({{ if (isPtrType (index $meth.Arguments 0).Type) }}*{{ end }}{{ formatType (index $meth.Arguments 0).Type }}){{ end }})
        {{ end }}
    }
}
{{ end }}

{{ end }}